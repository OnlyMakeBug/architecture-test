# config description:

# 1.allowMultiQueries=true  //Although mybatis supports batch update, we all know that batch update of mybatis is the splicing of mysql statements. However, the mysql statement after splicing will report syntax errors. Therefore, this attribute needs to be added in order to make batch operation can be executed smoothly

# 2.useUnicode=true&characterEncoding=utf-8  //These two properties are set in pairs to provide the database driver with the encoding type of the data being transmitted and returned.

# 3.zeroDateTimeBehavior=convertToNull  
#The timestamp type Cannot be handled correctly when the operation value is 0. 
#Instead, an exception is thrown by default, which is what you see: java.sql.sqlexception: Cannot convert value '0000-00-00 00:00:00' from column 7 to timestamp. 
#There is a property in the JDBC connection string: zeroDateTimeBehavior, which can be used to configure the handling policy if this happens, 
#and it has the following three property values:
#    exception: the default value is thrown SQL state [S1009]. Cannot convert value... The exception;
#    convertToNull: converts a date to NULL;
#    round: replace with the latest date, 0001-01-01;
#Therefore, for such exceptions, you can consider modifying the connection string and attaching the zeroDateTimeBehavior=convertToNull property to avoid them.

# 4.autoReconnect=true  //Is the database connection automatically reconnected when it is abnormally interrupted? It can solve the problem of automatic disconnection when there is no database operation for 8 hours

# master database instance config,can also config slave database.
jdbc.driver=com.mysql.jdbc.Driver
slave.jdbc.url=jdbc:mysql://localhost:3309/test1?useUnicode=true&characterEncoding=utf-8&useAffectedRows=true&autoReconnect=true&allowMultiQueries=true
master.jdbc.url=jdbc:mysql://localhost:3309/test?useUnicode=true&characterEncoding=utf-8&useAffectedRows=true&autoReconnect=true&allowMultiQueries=true
master.jdbc.username=zhoujian
master.jdbc.password=a52240@qq

#dbcp config

# 0
# Initializing connections: number of initializing connections created at connection pool startup, supported after version 1.2
dbcp.initialSize=0

# 8
# Maximum active connections: the maximum number of active connections that the connection pool can allocate at one time,
#If it is set to a non-positive number, it is unrestricted
dbcp.maxActive=20

# 8 
dbcp.maxIdle

# 0
# Minimum free connection: 
# the minimum number of connections allowed to remain free in the connection pool,
# below which new connections are created,
# If set to 0, it is not created
dbcp.minIdle=0

# infinite
# Maximum wait time: 
# the maximum time (in milliseconds) that the connection pool waits for the connection to be returned when no connection is available,
# If time is exceeded, an exception is thrown, and if set to -1, the wait is infinite
dbcp.maxWait=10000

# false 
# Indicates whether or not to check before taking the connection out of the pool, and if the check fails,
# The connection is removed from the pool and another is attempted.
# Set to true, the validationQuery parameter must be set to a non-empty string for this to take effect
dbcp.testOnBorrow=false

# false
# Indicates whether to inspect before returning to the pool
# Note: set to true, the validationQuery parameter must be set to a non-empty string for this to take effect
dbcp.testOnReturn=false

# SQL query
dbcp.validationQuery=select 1

# false
# Indicates whether the connection has been verified by the free connection collector (if any). If the detection fails,
# The connection is removed from the pool.
# Note: set to true, the validationQuery parameter must be set to a non-empty string for this to take effect
dbcp.testWhileIdle=true

#-1
# The value of the time in milliseconds that the idle connection collector thread sleeps while it is running.
# If set to non-positive, the free connection collector thread is not run
dbcp.timeBetweenEvictionRunsMillis=60000

# 3
# Sets the number of connections to check each time
# The number of connections checked at each free connection collector thread (if any) run
dbcp.numTestsPerEvictionRun=3

# 1000 * 60 * 30ms
# Set minimum idle time
# The minimum time in milliseconds for a connection to remain idle in the pool and not be reclaimed by the idle connection collector thread (if any)
dbcp.minEvictableIdleTimeMillis=30000

# false
# Flags whether to delete leaked connections if they exceed the removeAbandonedTimout limit.
# If set to true, the connection is considered compromised and can be removed if the idle time exceeds removeAbandonedTimeout.
# Set to true to fix database connections for poorly written programs that do not close connections.

# If "removeAbandoned" is enabled, the connection may be pooled if it is thought to be compromised.
# getNumIdle() < 2 And (getNumActive() > getMaxActive() -3) is triggered.
# For example, "removeAbandoned" can be triggered when maxActive=20, active connection is 18, and idle connection is 1.
# However, active connections are only removed if they have not been used for more than a "removeAbandonedTimeout", which defaults to 300 seconds.
# Journeys are not counted as being used in a resultset.
dbcp.removeAbandoned=true

# 300s
# A leaked connection can be deleted by the timeout value in seconds
dbcp.removeAbandonedTimeout=300

# false
# Marks whether to print the program's stack traces log when a Statement or connection is compromised.
# Logs of leaked Statements and connections are added to each connection to open or generate a new Statement,
# Because you need to generate the stack trace.

# false 
dbcp.logAbandoned=true